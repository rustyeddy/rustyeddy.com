#+title: The Software Development Process
#+date: 2020-04-05

** Loosing sleep over your next software project. 

Waking up in a cold sweat from a night mare about bugs, not the icky
creepy crawly kind ...

Sorry for the predictable, cheesy and yet, unavoidable analogy. But
the reality may infact be **worse than disgusting caca roaches**, but
things that make your customers sad and your boss mad.

Software bugs. Ick!!! 


** Describe Symptoms

*** Do you wonder why programmers who are supposed to be sooo smart can't seem to remember shit? 

I can't count the times I've told a team member what we are doing, or
in a meeting, mention a particular task that needs to be addressed,
only to find three weeks lather that nothing has been accomplished.

It is just about enough to make me want to start writing things down.

**** How to get everybody on the same page



If you want to /be a part of/ a functional team that benefits from
your leader ship, I suggest you make it clean


By clearly stating a) The single most important objective of the
project, which must be reasonable. Followed by b) first pass at establishing clear
and measurable milestones.

Measurable, means that can at very minimum be counted as done.

*** Have You started Scheduling Pizza Runs 2:00am the night before a realease?

Every release, you swear you will apply the lessons learned from this
and previous mistakes to never repeat them resulting in predictable
stress free releases.

However, you are still ordering Pizza at 2:00am, not so because of
hunger, more so to ease the intense coffee buzz zinging in your head
yer the ol tummy a bit nautious. 

That is not a good comb with the pre-release stress knowing the
success of the company is directly related to the success of your
this software project.

*** Why are programmers always talking gibberish, no matter what country they are from? 

Would it it strike fear in your heart if the doctor responsible
for saving your life only spoke /Gaelic/?

Well, can't imagine it feels any better knowing your team of
engineers, the ones responsible for the success of the software
project, and infact **directly** responsible for the success of your
company only speak /techalic/? (at /Galelic/ can be translated with
help of the Internet)

*** Ah, I can go on for hours

As I /jot/ these thoughts down, endless stories, lessons and anecdotes
flood my brain. Alas, me little fingers only move so fast..

So I will not go on for hours, rather, I suggest that you:

**** Embrace the Process

It will set you free! Believe it or not! 

If you embrace /a process/, I am /not/ talking about a intrusive oger
of tasks and reports that amount to throwing 6 inches of molases on a
race track just before a 100 yard dash.

No, not that, but 

**** Just Enough Process (JEP)

Yep, /Just Enough Process (JEP)/ to keep the entire team organized,
tasks and goals /clearly/ stated and all vital communication recorded
for accuracy and perhaps posterity.

Yes, it is possible, not easy, but quite doable!

* Process Your Problems AWAY!

Through JEP you can start gaining a sense of clarity that will lead to
a team huddled around a single and unified goal. All with a
clear vision of a **successful outcome** looks like, with the passion
to move the project to the only real definition of **success**: a joy
filled customer!

** My Best Practices

Here are the /most/ important elements of a /successful software
project/, IMHO. The following list is far from exhaustive, hell we
don't have the room (or enough of your or my attention) to cover
everything, but.

Following these guidelines will get you off to a good start.

** Clarity and Unification toward a single Goal

*** The One Goal

The best thing you can do as a leader is establish a clear, reasonable
and measurable goal. That can be quadrupled if the team can align
their values and passion to something that can really be done.

*** Milestones

The first step in this process is to take a first pass at
Milestones. Milestones will set the pace and priority for which the
application comes together. 

As we get more into this process, we will consider /best practices/ to
**accurrately** predicting software cost. 

*** The Reality of Budgets and Schedules

This will apply equally well to the schedule. I may have some thoughts
on this topic that sound a little radical, but if you let the logic
play out, you'll may find your perspective on the matter of schedule
and budget to shift getting something useful from the project ASAP.

** Staying in Sync
Getting a diverse team of techies, designers, writers and managers on
the same page emitting high voltage energy to the project is a great
accomplishment, well done!

*** Channeled Energy

With all that energy MUST be /choreographed/ not necessarily
orchestrated (more on this later), in the right, positive direction.  

An amazing accomplishment, Congrats3!

But don't let the team burn out of control! The last thing we want are a
bunch of race cars making up the race track during the race. 

Perhaps a better analogy would have been a team of Klydsdales pulling
a wagon toward the drivers destination is more appropriate, but the
thought of equating high paid developers with caged animals seemed a
little condescending.

Sorry, I do loose track at times (feel free to tell me to speed things
up a bit, by the way..).

*** Version Control is The Foundation of Software

Period. Without version control you have a mess or /ping.c/!.  

The cool thing is, version control is all the rage!!! Every developer
worth their salt has a github account (whether they use it or not), I
suggest everybody involved in the software development process do the
same. 

*** Build Your Process Around Your Development Team

Developers are likely amoung largest expense, why not make them  as
efficient (and as happy, they may give you a $2/hr discount) by
accepting the fact that you don't have to be a developer to benefit
from processes that originated from the software industry.

**** Rustys Wacky Views

Someday, software development tools and processes are going to
transcent just the software development community, for good reason.

Smart managers will embrace this and loose the fear of /all things
programmer/ and understand enough to be on sync with perhaps your most
valuable asset.


** Testing
Please: **DO NOT** recruite your customers to be your /QA/
department. Especially if they are unanaware, thinking they are
getting a **usable** piece of software.

It is time to start adopting a /Test Driven Development (TDD)/
mindset. Even if you are knee deep into an existing development
project, get started building out our TDD now!

*** Before Development comes a Test Plan!

Do not start development before you have a test plan. Period. 

It can be simple, And it will not be complete, But it must precess
any development, And is required Prior to acceptance testing.

*** Test plans Tie to Milestones and Tasks

Now here is where we get some slickness going. We are going to create
a test or tests (as many as needed) that will tie back to the tasks
and milestones that we have began to layout.

As the tests are passed, and the code is commited to the repo, we can
check another well done task off, getting us closer to our milestone
and hence goal.

This also begins to give us insight to /realistic/ development
times. Letting us adjust our predictions for the next time around. 

** Deploy and Updates

Well now that code has passed /acceptance/, that is, as soon as it is
/acceptable/ for your customers to have:

**** SHIP IT!

But, goodness, gracious, Again DO NOT make this painful on your
peeps. Updates should come easy. That'll keep them happy for sure! 

*** Bugs will exist

Even the cleanest home is going to have a bug somewhere, right? Yep,
same for software. We are going to embrace the bug, and then squish it
(electronically of course).

This will re-inforce your clients love for you. The rare bug they
do encounter get squashed and a fixed promptly and transparently roles
out to your customers. 

*** Success demands New Features 

Your users will be so happy and confident in the software, they will
be expecting wonderful new features to be rolling out. 

They don't want to wait for them, nor do they want the old features to
break! 

*** A seemless, zero touch upgrade experience will be GREATLY appreciated! 

Zero Touch! The holy grail of complicated software and network
systems.

** Capturing Feedback

Make it easy for customers to talk to us. We want bug Reports so we
can squash them little bastards.

We want feedback, nobody wants to work on levers and gadgets that
nobody is going to use. 

The best feedback we can get is always going to be the people that use
the software, oh yea, and the people that pay for it.
  
** Adding Some Analytics
Deployed software is a living being and needs to /live/
somewhere. Living spaces ain't free, a little bit of budgeting and
tracking can help you make decisions that will save lots of cash.

Also find weak links in your system that could be pissing your visitor
off. If we are pissing our visitors off, we at least better know why,
and most of them will not take the time to tell us why...

* Summary

I have determined that I am going to start documenting and organizing
my /hobos bag/ brain of /Software Development Best Practices (SDBP)/,
let's call it.

I have built this bag of experience, skill and opinions over many
years of working on, and leading /wonderously successful/ and
/horribly tragic/ software projects.

I certainly do NOT want to experience the /horribly tragic/ projects
any longer, as well I do NOT want my clients to suffer anything of the
sort. 

So, at as base, I have documented the practices into **repeatable
processes** and hopefully, they get vetted by experience software
jockeys and managers alike.

Also, I would really like to hear, what you fear, or ailes you when
your knee deep in a software process.

>> Would You Mind doign me a Favor - CTA << 
