<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>How to Build a Self Watering Garden on Rusty Eddy</title>
    <link>http://www.rustyeddy.com/iot/</link>
    <description>Recent content in How to Build a Self Watering Garden on Rusty Eddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://www.rustyeddy.com/iot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iot Edge Gateway</title>
      <link>http://www.rustyeddy.com/iot-project/hub/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/iot-project/hub/</guid>
      <description>What Does OG Hub Do? In a nutshell the Hub gathers environmental data from a network of Collection Stations using the well known MQTT Messaging protocol. The hub feeds the data to the Oraganic Gardner application, streams it real-time to dashboard users via Websockets and caches the data in RAM.
How Does the Hub Work? The Hub is a small, fast server written in Go with the following dependencies:</description>
    </item>
    
    <item>
      <title>Collection Station</title>
      <link>http://www.rustyeddy.com/iot-project/collection-station/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/iot-project/collection-station/</guid>
      <description>Publishing Sensor Data The idea is pretty simple really: build a network of wireless battery powered devices to gather environmental data such as temprature, moisture, light levels, etc. The collected data will then be published via MQTT wirelessly to the Hub.
Types of Published Data The planned data types to be published by the system are concerned with the following types of sensors.
Temprature Humidity Moisture Light Barometric Pressure Technically any type of data could be published and collected however we are focused on the type of data our OG application will use.</description>
    </item>
    
    <item>
      <title>Adding the REST API to IoT Gateway</title>
      <link>http://www.rustyeddy.com/iot/iot-gateway-rest/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/iot/iot-gateway-rest/</guid>
      <description>Previously we have added MQTT to the IoT Gateway as part of the Organic Gardner Project. This gave the gateway the ability to collect and store a lot of environmental data from sensors all over the place.
Now we need to provide a way for others programs, like the IoT Dashboard access that data via a REST API.
Implementing a RESTful API The RESTful API convention is exteremely popular, well supported and is perfectly suited to providing access to the sensor data that has been collected.</description>
    </item>
    
    <item>
      <title>Adding MQTT to the IoT Gateway</title>
      <link>http://www.rustyeddy.com/iot/iot-gateway-mqtt/</link>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/iot/iot-gateway-mqtt/</guid>
      <description>This page marks the beginning of the Organic Gardner (OG) IoT Project Milestone 1 development! If you want to program along but have not yet worked with the Go programming language check this intro: Getting ready to Go.
A Brief About MQTT MQTT is the messaging protocol that a Collector will use to periodically publish sensor data (like temperature and humidity) to the IoT Gateway. MQTT will also be used to signal when the Control Station or Controller will respond to commands to turn a sprinkler pump on or off.</description>
    </item>
    
  </channel>
</rss>
