<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Predictable IoT Software Development on Rusty Eddy</title>
    <link>http://rustyeddy.com/software/</link>
    <description>Recent content in Predictable IoT Software Development on Rusty Eddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://rustyeddy.com/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Objective and Milestones</title>
      <link>http://rustyeddy.com/software/objectives-and-milestones/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/objectives-and-milestones/</guid>
      <description>Symptoms     Team is in a growing state of chaos    Measuring Progress is impossible    Measuring Quality is impossible    Budget tracking is impossible    Team is loosing moral    Team members are not working on the most important tasks    The best team members leave   Potential Problems     No Clear, Reachable Objective Goals    No Milestones or Milestones are not measurable (can be completed)    Nobody really understands the customers needs and wants    The goals keep changing increasing confusion and waste    Team leadership is not engaged with user before and during R&amp;amp;D   The Solution   As a preface, before getting into the particulars of solving this type of problem I would like to make it clear that this framework is a direct [perhaps imperfect] reflection of the seminal works of Steve Blank Four Steps to Epiphany and Eric Ries and the Lean Startup, as well as the principals of Agile development.</description>
    </item>
    
    <item>
      <title>Software Development Life Cycle</title>
      <link>http://rustyeddy.com/software/software-development-life-cycle/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/software-development-life-cycle/</guid>
      <description> Symptoms     Changes made to software are often lost    Large forklift changes frequently cause compilation problems and long integration times.    Programmers are often working with different variations of the code, usually gets ugly when somebody has to merge them    Team members store various items of the project (including software in wild and bizzare places)   Problem     Do not have a defined process for the SDLC    Lack of version control    Next: Testing </description>
    </item>
    
    <item>
      <title>Piece of Mind with Testing</title>
      <link>http://rustyeddy.com/software/testing/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/testing/</guid>
      <description> Symptoms     Clients become the testers    CICD </description>
    </item>
    
    <item>
      <title>No Hassle Updates with CI/CD</title>
      <link>http://rustyeddy.com/software/cicd/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/cicd/</guid>
      <description> Next: Measure and Optimize </description>
    </item>
    
    <item>
      <title>The Feedback Loop Bugs Tracking and Feature Requests</title>
      <link>http://rustyeddy.com/software/feedback-loop-bugs/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/feedback-loop-bugs/</guid>
      <description>As we pointed out on the previous page, we know there are going to [occaisonal] bugs and we can expect an onslaught of feature requests.  Let&amp;#39;s make it really easy for our clients to communicate with us.  &amp;gt; Help desk software..    Fix bugs quick    Acknowledge and roadmap features    Engage in general discussions    Consider help desk software.</description>
    </item>
    
    <item>
      <title>Uncovering Unseen Improvements with Analytics</title>
      <link>http://rustyeddy.com/software/optimize/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/optimize/</guid>
      <description> What to Expect We will cover the entire Software Development Life Cycle (SDLC) process before any code is written, through the delivery and maintenance of a production piece of software. As this series moves along, I will be demonstrating the techniques using 100% free tools and OpenSource software, such that you can easily follow along.    Table of Contents Clear Goal and Milestones Version Control all the Things Test First and Always Automatic Updates Issue Tracking Analytics and Elastic       </description>
    </item>
    
    <item>
      <title>Call To Action - Let me Know What do You think</title>
      <link>http://rustyeddy.com/software/call-to-action/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/call-to-action/</guid>
      <description> Please Take My Survey  </description>
    </item>
    
    <item>
      <title>The Software Development Process</title>
      <link>http://rustyeddy.com/software/lander02/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/lander02/</guid>
      <description> TODO Put Headline here  Clear Objectives and Milestones with Kanban (PM)   If you find yourself with what feels like an excessive amount of instances of mis-communication Organization and Synchronization with Version Control (VC)  Quality Assurance with Testing with Test Driven Design (TDD)  Painless updates for happy clients with (CI/CD)  Maintain clear communication with your clients (Help Desk)  Analyze your systems and flush out bottle necks and operational waste (Analytics)  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://rustyeddy.com/software/scratch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/scratch/</guid>
      <description>With at least a first slash at some milestones and goals that the entire team can huddle around. Let&amp;#39;s roll up our sleeves and get Buzzin!   But before we scatter to our cubes and bury our heads behind terminals, let&amp;#39;s all agree to get on the same page by choosing a set of tools (manual or electric) that we all are going to agree on using in a consistent and collaborative way!</description>
    </item>
    
  </channel>
</rss>