<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Process of Delivering Predictable Software on Rusty Eddy</title>
    <link>http://rustyeddy.com/software/</link>
    <description>Recent content in The Process of Delivering Predictable Software on Rusty Eddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://rustyeddy.com/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software is Hard</title>
      <link>http://rustyeddy.com/software/software-is-hard/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/software-is-hard/</guid>
      <description>Why Is Software So Difficult? Software development projects are one of the most notoriously mis-understood and incorrectly managed of all the common processes used throughout the business world.
There are a number of reasons for this chaos. Software often is solving a complex problem, that unfortunately you can&amp;rsquo;t see. But perhaps the worst problem with software projects are the diverging expectations between developers and users.
Software is Not Regulated Another reason software projects are capable of running so far amok is a lack of regulations.</description>
    </item>
    
    <item>
      <title>Customer Discovery and MVP</title>
      <link>http://rustyeddy.com/software/customer-discovery-and-mvp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/customer-discovery-and-mvp/</guid>
      <description>Customer Discovery consists of one or more customer discovery sessions, where all users and owners of the software will be interviewed for their expectations, needs and desires for the upcoming software project.
User Stories The information gathered from these sessions are then articulated in a series of non-technical descriptions of how the software is used by everybody.
These descriptions of the software requirements are often referred to as User Stories. Basically, each story walks through one of the ways in which the planned software will be used.</description>
    </item>
    
    <item>
      <title>Organizing Software Projects with Kanban</title>
      <link>http://rustyeddy.com/software/kanban/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/kanban/</guid>
      <description>Kanban is fantastically simple. We will create a board with 3 columns, Todo, Work In Progress and Complete.
Each column is populated with a single card for every task that must be done. The cards are prioritized and move through the system as the work progresses.
Good Kanban Reference My goal is NOT to describe Kanban itself. Instead, here is a good video if you are not already familiar with it.</description>
    </item>
    
    <item>
      <title>Tracking Changes to Code</title>
      <link>http://rustyeddy.com/software/tracking-changes-to-code/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/tracking-changes-to-code/</guid>
      <description>It frightens me everytime I am introduced to a new software project where the &amp;ldquo;latest&amp;rdquo; source code is somebodies folder somewhere with copies being passed around on thumb drives.
Such a lack process invites confusion from the beginning and inspires questions like:
 which copy of the file has your changes?
 If you are working like this STOP! It does not have to be this way. no, start using Version Control now!</description>
    </item>
    
    <item>
      <title>Clone and Branch</title>
      <link>http://rustyeddy.com/software/clone-and-branch/</link>
      <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/clone-and-branch/</guid>
      <description>Initial changes to software are always done to a copy of the actual source code. This provides a local sandbox for the developer to make changes, experiement with fixes and do really weird things that will never be allowed in the final product (we will cover this in the peer review section).
Clone The Repo Our actual &amp;ldquo;Source Code&amp;rdquo; resides in what&amp;rsquo;s called a Software Repository which is a server in the cloud, however the work performed by the developer is typically done on a local computer.</description>
    </item>
    
    <item>
      <title>Testing Software</title>
      <link>http://rustyeddy.com/software/testing/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/testing/</guid>
      <description>Testing Unit and Systems Before any developers new code can be integrated into the mainline production code base, it must be tested, vetted and peer reviewed.
Software Testing has been written about extensively, so I won&amp;rsquo;t spend time here discussing testing directly, as there are as many ways to test software as there are technologies.
Test Driven Development Test Driven Development (TDD) a principal for which I agree is necessary, but I don&amp;rsquo;t always adhere to in practice.</description>
    </item>
    
    <item>
      <title>Peer Reviews</title>
      <link>http://rustyeddy.com/software/peer-review/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/peer-review/</guid>
      <description>A Peer Review is the process of one or more peers knowledgable about your code who can examine and scrutinize every line. This is a painful process, but so necessary.
Peer Reviews Are Painful but Worth IT! For the programmer, that means having your work criticized by other people. Maybe even people that think they are smarter than you, but are not.
Reviewers, typically don&amp;rsquo;t like (or at least don&amp;rsquo;t love) reviewing other peoples code.</description>
    </item>
    
    <item>
      <title>Mainlining Your Vetted Code</title>
      <link>http://rustyeddy.com/software/commit-and-merge/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/commit-and-merge/</guid>
      <description>Github and making the Commitment Now it is time for the developer to commit the changes she has been working on, tested and pushed through the peer reviews. This step is pretty simple, however, we want to make sure we are doing it correctly.
 Todo example commit
 When the code is merged into the main or master repository, just like commitments, it will be accompanied by the log comments that go along with the log files.</description>
    </item>
    
  </channel>
</rss>