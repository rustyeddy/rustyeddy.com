<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Process of Delivering Predictable Software on Rusty Eddy</title>
    <link>http://rustyeddy.com/software/</link>
    <description>Recent content in The Process of Delivering Predictable Software on Rusty Eddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://rustyeddy.com/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software is Hard</title>
      <link>http://rustyeddy.com/software/software-is-hard/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/software-is-hard/</guid>
      <description>Why Is Software So Difficult? Software development projects are one of the most notoriously mis-understood and incorrectly managed of all the common processes used throughout the business world.
There are a number of reasons for this chaos. Software often is solving a complex problem, that unfortunately you can&amp;rsquo;t see. But perhaps the worst problem with software projects are the diverging expectations between developers and users.
Software is Not Regulated Another reason software projects are capable of running so far amok is a lack of regulations.</description>
    </item>
    
    <item>
      <title>Customer Discovery and MVP</title>
      <link>http://rustyeddy.com/software/customer-discovery-and-mvp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/customer-discovery-and-mvp/</guid>
      <description>Customer Discovery consists of one or more customer discovery sessions, where all users and owners of the software will be interviewed for their expectations, needs and desires for the upcoming software project.
User Stories The information gathered from these sessions are then articulated in a series of non-technical descriptions of how the software is used by everybody.
These descriptions of the software requirements are often referred to as User Stories. Basically, each story walks through one of the ways in which the planned software will be used.</description>
    </item>
    
    <item>
      <title>Organizing Software Projects with Kanban</title>
      <link>http://rustyeddy.com/software/kanban/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/kanban/</guid>
      <description>Kanban is fantastically simple, we&amp;rsquo;ll create a board with 3 columns, Todo, Work In Progress and Complete.
Each column is populated with a single card for every task that must be done. The cards are prioritized and move through the system as the work progresses.
Good Kanban Reference My goal is NOT to describe Kanban itself, rather here is a good video if you are not already familiar with it.</description>
    </item>
    
    <item>
      <title>Tracking Changes to Code</title>
      <link>http://rustyeddy.com/software/tracking-changes-to-code/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://rustyeddy.com/software/tracking-changes-to-code/</guid>
      <description>It frightens me everytime I am introduced to a new software project where the &amp;ldquo;latest&amp;rdquo; source code is somebodies folder somewhere and copies are being zipped and copied via email or thumbdrive.
This process is confusing from the get go, and just goes downhill from there.
 If you are working like this STOP! Start using Version Control NOW!
 Done correctly, your VC will track every change to your source code with clear well written summaries (logs) of the problem that was solved.</description>
    </item>
    
  </channel>
</rss>