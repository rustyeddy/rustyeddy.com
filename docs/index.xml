<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rusty Eddy</title>
    <link>http://www.rustyeddy.com/</link>
    <description>Recent content on Rusty Eddy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://www.rustyeddy.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iot Edge Gateway</title>
      <link>http://www.rustyeddy.com/iot-project/hub/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/iot-project/hub/</guid>
      <description>What Does OG Hub Do? In a nutshell the Hub gathers environmental data from a network of Collection Stations using the well known MQTT Messaging protocol. The hub feeds the data to the Oraganic Gardner application, streams it real-time to dashboard users via Websockets and caches the data in RAM.
How Does the Hub Work? The Hub is a small, fast server written in Go with the following dependencies:</description>
    </item>
    
    <item>
      <title>Software is Hard</title>
      <link>http://www.rustyeddy.com/software/software-is-hard/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/software-is-hard/</guid>
      <description>Why Is Software So Difficult? Software development projects are one of the most notoriously mis-understood and incorrectly managed of all the common processes used throughout the business world.
There are a number of reasons for software projects being classified as a disastor so often. Software often is solving a complex problem that unfortunately can&amp;rsquo;t be seen.
Perhaps the worst problem with software projects are the diverging expectations between developers and users.</description>
    </item>
    
    <item>
      <title>Customer Discovery and MVP</title>
      <link>http://www.rustyeddy.com/software/customer-discovery-and-mvp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/customer-discovery-and-mvp/</guid>
      <description>Customer Discovery consists of one or more customer discovery sessions, where all users and owners of the software will be interviewed for their expectations, needs and desires for the upcoming software project.
Don&amp;rsquo;t just stop at the first answer, it will be too vague. Dig deeper and start peeling back the details. This great article on the Five Why&amp;rsquo;s
User Stories The information gathered from these sessions are then articulated in a series of non-technical descriptions of how the software is used by everybody.</description>
    </item>
    
    <item>
      <title>Organizing Software Projects with Kanban</title>
      <link>http://www.rustyeddy.com/notes/kanban/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/kanban/</guid>
      <description>Kanban is fantastically simple. We will create a board with 3 columns, Todo, Work In Progress and Complete.
Each column is populated with a single card for every task that must be done. The cards are prioritized and move through the system as the work progresses.
Good Kanban Reference My goal is NOT to describe Kanban itself. Instead, here is a good video if you are not already familiar with it.</description>
    </item>
    
    <item>
      <title>Collection Station</title>
      <link>http://www.rustyeddy.com/iot-project/collection-station/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/iot-project/collection-station/</guid>
      <description>Publishing Sensor Data The idea is pretty simple really: build a network of wireless battery powered devices to gather environmental data such as temprature, moisture, light levels, etc. The collected data will then be published via MQTT wirelessly to the Hub.
Types of Published Data The planned data types to be published by the system are concerned with the following types of sensors.
Temprature Humidity Moisture Light Barometric Pressure Technically any type of data could be published and collected however we are focused on the type of data our OG application will use.</description>
    </item>
    
    <item>
      <title>Version Control and Tracking Progress</title>
      <link>http://www.rustyeddy.com/software/vcs-tracking-progress/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/vcs-tracking-progress/</guid>
      <description>It frightens me everytime I am introduced to a new software project where the &amp;ldquo;latest&amp;rdquo; source code is somebodies folder somewhere with copies being passed around on thumb drives.
Such a lack process invites confusion from the beginning and inspires questions like:
which copy of the file has your changes?
If you are working like this STOP! It does not have to be this way. no, start using Version Control now!</description>
    </item>
    
    <item>
      <title>Improving Quality by Testing Software</title>
      <link>http://www.rustyeddy.com/software/testing/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/testing/</guid>
      <description>Testing Unit and Systems Before any developers new code can be integrated into the mainline production code base, it must be tested, vetted and peer reviewed.
Software Testing has been written about extensively, so I won&amp;rsquo;t spend time here discussing testing directly, as there are as many ways to test software as there are technologies.
Test Driven Development Test Driven Development (TDD) a principal for which I agree is necessary, but I don&amp;rsquo;t always adhere to in practice.</description>
    </item>
    
    <item>
      <title>Peer Reviews - And Culture</title>
      <link>http://www.rustyeddy.com/software/peer-review/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/peer-review/</guid>
      <description>A Peer Review is the process of one or more peers knowledgable about your code who can examine and scrutinize every line. This is a painful process, but so necessary.
Peer Reviews Are Painful but Worth IT! For the programmer, that means having your work criticized by other people. Maybe even people that think they are smarter than you, but are not.
Reviewers, typically don&amp;rsquo;t like (or at least don&amp;rsquo;t love) reviewing other peoples code.</description>
    </item>
    
    <item>
      <title>Commit Code and Make History</title>
      <link>http://www.rustyeddy.com/software/commit-code-make-history/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/commit-code-make-history/</guid>
      <description>Github and making the Commitment Now it is time for the developer to commit the changes she has been working on, tested and pushed through the peer reviews. This step is pretty simple, however, we want to make sure we are doing it correctly.
Todo example commit
When the code is merged into the main or master repository, just like commitments, it will be accompanied by the log comments that go along with the log files.</description>
    </item>
    
    <item>
      <title>Release Process</title>
      <link>http://www.rustyeddy.com/software/release-process/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/release-process/</guid>
      <description>This is the point where software is ready to be passed along to the user/customer, an official release. We will want to formalize the process of releasing the softare.
For example, when a new release is cut, the following process may be in place:
Commit to main in Github repository New version number is generated Automated build is triggered Automated system tests are run New binary test images are copied to a distribution server or pushed to production servers The actual process will vary according to many factors of the application With every successful software project you will be doing releases regularly.</description>
    </item>
    
    <item>
      <title>Sugo Music Dashboard</title>
      <link>http://www.rustyeddy.com/resume/clients/sugo-music/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/clients/sugo-music/</guid>
      <description>&lt;p&gt;Sugo Music is an online Music publishing platform for Artists by
artists. It was my responsibility to manage the software process,
build and test the backend and manage the front-end development in
React.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Go, React, REST API, HTTP, HTML, JavaScript, Webapp, fullstack&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>University of Southern California ~ MSCS</title>
      <link>http://www.rustyeddy.com/resume/edu/usc/</link>
      <pubDate>Tue, 02 Jan 1996 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/edu/usc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sahara Networks</title>
      <link>http://www.rustyeddy.com/resume/clients/sahara-networks/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/clients/sahara-networks/</guid>
      <description>&lt;p&gt;Sahara Networks is building something truley unique, connecting
micro-controllers and IoT devics across the network allowing virtual
circuits to be created. I help design, develop and lead the design and
implementation of the network protocol that delivers high speed
digital I/O signals across a &amp;ldquo;device network&amp;rdquo;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Backend, C/C++, nodejs, TCP/IP and Raspberry Pi&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Radian Laser</title>
      <link>http://www.rustyeddy.com/resume/clients/radian-laser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/clients/radian-laser/</guid>
      <description>&lt;p&gt;Radian is a small, fast moving startup that sells Laser Engravers and
Cutters. I manage five software projects, including two Web
Applications for the control and calibration of the Laser system. I
am also responsible for the successful delivery and maintanance of the
products Firmaware and Fleet Management system.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C/C++, Go &amp;amp; Python, embedded systems and microservices.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Cloud Trek</title>
      <link>http://www.rustyeddy.com/resume/clients/alchemy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/clients/alchemy/</guid>
      <description>&lt;p&gt;Alchemy Networks is an indepently owned service provider. I automated
the provisioning of their Private Cloud Service offering. I was an
individual contributor on this project. I collaborated with another
developer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ansible, Linux, Python, Websockets, Networking&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>DirecTV / AT&amp;T</title>
      <link>http://www.rustyeddy.com/resume/clients/att/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/clients/att/</guid>
      <description>&lt;p&gt;I was hired by DirecTV (and subsequently AT&amp;amp;T) to help lead the new
Software Defined Networking (SDN) team. We were tasked with replacing
the companies aging production Video Distribution Network with a new
modernized design. Project goals included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Replace aged network with modern SDN solution&lt;/li&gt;
&lt;li&gt;Solution to incrementally replace existing production network&lt;/li&gt;
&lt;li&gt;Development would build on industry standard OpenSource solutions&lt;/li&gt;
&lt;li&gt;Had to be Reliable and Scalable&lt;/li&gt;
&lt;li&gt;Linux, OpenFlow, Java and Python&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Sierra Hydrographics</title>
      <link>http://www.rustyeddy.com/resume/clients/sierra-hydrog/</link>
      <pubDate>Sat, 02 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/clients/sierra-hydrog/</guid>
      <description>&lt;p&gt;Led the design and development of automated data collection for
hydrological gauging stations.  Data is gathered by pulling data from
line of sight telemetry radios and NOAA/LRGS satellite ground
stations. Data is fed to timeseries server for hydrological
calculations and alert monitoring.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Timeseries database, C/C++, PHP, Python and Java.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Green Hills Software</title>
      <link>http://www.rustyeddy.com/resume/clients/green-hills/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/clients/green-hills/</guid>
      <description>&lt;p&gt;I worked on a small team that added multicast forwarding to the &lt;em&gt;Integrity&lt;/em&gt; RTOS
kernal.  Modified multicast routing daemon to run on same operating
system allowing the product to serve as the foundation for a military
grade network switch/router.  Added IPv6 Neighbor Discovery to the
suite of routing protocols.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C/C++ and Network Routing Protocols; Real Time OS.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>The IMS Company</title>
      <link>http://www.rustyeddy.com/resume/clients/ims-company/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/clients/ims-company/</guid>
      <description>&lt;p&gt;Led a project to replicate entertainment media (music, video and
games) from a single media source to hundreds of in­flight
entertainment units with minimal redundancy.  Contributed to the
design and development of an inflight entertainment server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Perl, Python, C/C++ and Java&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Cisco Systems</title>
      <link>http://www.rustyeddy.com/resume/jobs/cisco-systems/</link>
      <pubDate>Wed, 01 Feb 2006 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/jobs/cisco-systems/</guid>
      <description>&lt;p&gt;Original member of the Multicast Routing team.  Team of 12 responsible
for the design, implementation and testing the complete suite of
Multicast Routing protocols for the Cisco Carrier Routing System
(CRS).  Worked this project from early design through product launch
into maintenance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Computer Networks, Multicast Routing, C/C++, Real Time, Distributed
Systems&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>California State University, Long Beach</title>
      <link>http://www.rustyeddy.com/resume/edu/csulb/</link>
      <pubDate>Tue, 02 Jan 1996 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/edu/csulb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>USC ~ ISI</title>
      <link>http://www.rustyeddy.com/resume/jobs/usc-isi/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/jobs/usc-isi/</guid>
      <description>&lt;p&gt;Led the effort to add IGMP/PIM and Multicast Routing Information
Base (MRIB) to the Open Source &lt;em&gt;GateD&lt;/em&gt; suite of routing protocols.
Mentored graduate students and others that would eventually become
prominent members of the computer networking community.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Retix</title>
      <link>http://www.rustyeddy.com/resume/jobs/retix/</link>
      <pubDate>Tue, 01 Aug 1995 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/jobs/retix/</guid>
      <description>Promoted to lead the team of 6 engineers that developed and automated test plans for L2 switches, OSPF, RIP and BGP
Implemented an automated test framework and led junior engineers in developing the automated test suites. C; C++; Perl; TCL
Provided 3rd level customer support, serious customer problems that could not be resolved by customer support or field engineers became my teams responsibility to diagnose and determine solutions and workarounds was required.</description>
    </item>
    
    <item>
      <title>Rockwell, Intl. Space Systems Division</title>
      <link>http://www.rustyeddy.com/resume/jobs/rockwell/</link>
      <pubDate>Mon, 03 Jan 1994 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/jobs/rockwell/</guid>
      <description>&lt;p&gt;Led a team of 5 Sysadmins responsible for the use and well being of
Engineering Departments 300+ UNIX workstations, servers (Sun, HP, DEC)
and network.&lt;/p&gt;
&lt;p&gt;On a team that Developed a Real Time OS that was embedded in a variety
of space and military projects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>California State University ~ Chancelors Office</title>
      <link>http://www.rustyeddy.com/resume/jobs/csu-chancelor/</link>
      <pubDate>Tue, 01 Aug 1995 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/jobs/csu-chancelor/</guid>
      <description>&lt;p&gt;I was hired to install and manage the departments first AT&amp;amp;T Unix
Mini-computers, UUNET connection and write a bulletin board system for
California State Educators.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Software is Iterative</title>
      <link>http://www.rustyeddy.com/notes/iterative/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/iterative/</guid>
      <description>Good Software is Continually Improved
The greater the success software Is directly proportionate to The number of features that are requested As well as the number of bugs that are found.
Bug reports means your softwar is getting used.!.
That is obvious if people are happy using a software That they might have some requests that would flow in from time to time.
What might seem counterintuitive is the fact that, Even well done successful software will have bugs.</description>
    </item>
    
    <item>
      <title>Using Go timers for MQTT testing</title>
      <link>http://www.rustyeddy.com/notes/go-timers-testing-mqtt/</link>
      <pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/go-timers-testing-mqtt/</guid>
      <description>This article uses a Go timer and the Go select statement to test our MQTT publish and subscribe in a single simple test statement. A quick note on the go testing package: it is much like the JUnit where tests using a particular naming convention TestXXX(t *testing.T) {} will be run automatically with easy to reports having been generated.
The Problem The following code snippet is directly from the IoTe edge gateway project.</description>
    </item>
    
    <item>
      <title>Adding the REST API to IoT Gateway</title>
      <link>http://www.rustyeddy.com/iot/iot-gateway-rest/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/iot/iot-gateway-rest/</guid>
      <description>Previously we have added MQTT to the IoT Gateway as part of the Organic Gardner Project. This gave the gateway the ability to collect and store a lot of environmental data from sensors all over the place.
Now we need to provide a way for others programs, like the IoT Dashboard access that data via a REST API.
Implementing a RESTful API The RESTful API convention is exteremely popular, well supported and is perfectly suited to providing access to the sensor data that has been collected.</description>
    </item>
    
    <item>
      <title>Adding MQTT to the IoT Gateway</title>
      <link>http://www.rustyeddy.com/iot/iot-gateway-mqtt/</link>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/iot/iot-gateway-mqtt/</guid>
      <description>This page marks the beginning of the Organic Gardner (OG) IoT Project Milestone 1 development! If you want to program along but have not yet worked with the Go programming language check this intro: Getting ready to Go.
A Brief About MQTT MQTT is the messaging protocol that a Collector will use to periodically publish sensor data (like temperature and humidity) to the IoT Gateway. MQTT will also be used to signal when the Control Station or Controller will respond to commands to turn a sprinkler pump on or off.</description>
    </item>
    
    <item>
      <title>How to build a private wifi network for your webapp</title>
      <link>http://www.rustyeddy.com/notes/private-wifi-network-webapp/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/private-wifi-network-webapp/</guid>
      <description>I work with physical computing or devices that have rather sophisticated software that needs to be configured, monitored and controlled.
Building a Private Wifi Here is the situation, I just plugged a white box into the wall and it has a steady green light. I can see two other lights, one of which is red. The other two lights are off.
This device is pretty cool, it will control the lights in my garage, I have a well lit garage.</description>
    </item>
    
    <item>
      <title>A Simple Go Configuration</title>
      <link>http://www.rustyeddy.com/notes/go-configuration/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/go-configuration/</guid>
      <description>I use this same configuration structure and supporting functions in most every Go program I work on. It is pretty simple but makes it easy to keep global variables orgranized and configurable.
Here is what I do:
Create a type config struct
Every configurable variable for the program becomes a Member field of the Configuration structure.
Register every field of the Configuration Structure with go&amp;rsquo;s builtin flags package such that the flags are parsed when the program starts we can use our configuration variable.</description>
    </item>
    
    <item>
      <title>WPE an Excellerated Raspberry Pi Kiosk</title>
      <link>http://www.rustyeddy.com/notes/rpi-wpe-web-kiosk/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/rpi-wpe-web-kiosk/</guid>
      <description>The WPE project (TODO: place reference) allows you to create a hardware accelerated web viewing_ experience with an embedded system and inexpenive display.
For example a Raspberry Pi with an 7inch tftp touch screen has my brain racing with ideas for applications.
About WPE WPE creates a cool hardware accelerated kiosk, just point at a URL and the app displays the application takes over the screen.
It is awesome! But, it has one major drawback.</description>
    </item>
    
    <item>
      <title>Proof of Concept vs. Production</title>
      <link>http://www.rustyeddy.com/notes/poc-vs-production/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/poc-vs-production/</guid>
      <description>A POC is taking a conceptAnd demonstrating that it can actually be done in hardware and/or software. And implementation is takingApproving POC And turning it into something usable To somebody other than the developer.
Embrace this fact, And projecting software Development times and cost Become much less mysterious.
TODO Create an example PoC to Development
Was it Rodney Brooks that Said Plan on Throwing away your first version. Because you will anyway.</description>
    </item>
    
    <item>
      <title>Get Ready to Go</title>
      <link>http://www.rustyeddy.com/notes/get-ready-to-go/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/get-ready-to-go/</guid>
      <description>Get Ready To Go The IoT Gateway was written in the Go programming language. I won&amp;rsquo;t get into the reasons why Go is an excellent choice of programming language for this project other than to point out two advantages this project will benefit from right away:
Go is Compiled and easy to distribute First, Go is a compiled language making the resulting executable self contained with no external libraries or run time environment to rebuild, just copy a single binary, that is it.</description>
    </item>
    
    <item>
      <title>Paradise Aint Perfect</title>
      <link>http://www.rustyeddy.com/notes/paradise-aint-perfect/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/paradise-aint-perfect/</guid>
      <description>Paradise Ain&amp;rsquo;t Perfect Or maybe there is so much conflict that Hawaii doesn&amp;rsquo;t look like it is really everybodies paradise.
The point to all of this, a little bit of drilling down to all of the passangers, the captiain and crew as well as the owner of the boat would have all had better results.
If it was discovered before hand, that &amp;ldquo;Going to Hawaii&amp;rdquo;, really consisted of two groups: one going to Maui and one going to Kaui.</description>
    </item>
    
    <item>
      <title>Career Summary</title>
      <link>http://www.rustyeddy.com/resume/summary/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/summary/</guid>
      <description>I am a Software Engineer and Contract Programmer living in Huntington Beach, CA with my family. I build micro-services and work on micro-controllers, usually with Go, C/C++, Python and JavaScript (among other techs).</description>
    </item>
    
    <item>
      <title>Skills and Interests</title>
      <link>http://www.rustyeddy.com/resume/skills/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/skills/</guid>
      <description> Go, C/C++, Python and JavaScript (and many others..) Computer Networks, Multicast Video Distribution Distributed systems and realtime communications DevOps, cloud automation and continuous delivery Fullstack software development, reactive front-ends with VueJS MicroServices: REST APIs, Websockets, etc. Linux Systems and OpenSource Software </description>
    </item>
    
    <item>
      <title>Web Developers Guide to Web Design</title>
      <link>http://www.rustyeddy.com/software/website-design-process/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/website-design-process/</guid>
      <description>Thankfully the Internet is full of great designers with kind soles that have distilled their years of training, experience and most of all personal direction into a set of general guidelines and formulas that make even no-talents like myself look like a pro!
[TODO Give some credits and reference some of these folks].
My Prespective on UI Design At the moment of this writing I am in the processes of building a startup.</description>
    </item>
    
    <item>
      <title>Using Vue to Develop Webapps</title>
      <link>http://www.rustyeddy.com/notes/vue-frontends/</link>
      <pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/vue-frontends/</guid>
      <description>Every piece of software that exists has to speak to the external world in some manner. It might be programattically through messaging or an API call. It could be a human clicking through an GUI on our laptop or phone.
I think it is clear that web apps are taking over the world. It is a powerful notion that they can pretty much run on any computing devices that support a browser, which is almost everything with a screen.</description>
    </item>
    
    <item>
      <title>Bootstrap makes WebUI look great!</title>
      <link>http://www.rustyeddy.com/notes/bootstrap/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/bootstrap/</guid>
      <description>&lt;p&gt;Bootstrap is a great way to get your ugly little fledgling website
into something respectable in no time. Do not waste time futzing with
silly formating directives, focuse on the site itself!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Red Eye Video Server</title>
      <link>http://www.rustyeddy.com/notes/redeye/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/redeye/</guid>
      <description>The Red Eye project is a service definition rapper around inexpensive cameras attached to inexpesive micro-controllers that take pretty good video.
The video streams are built using the GStreamer library. The camera native capabilities are used to extract as high quailty, realtime images possible.
The video streams will be consumed by one or more sinks, including but not limited to Files, cloud storage, High Def Display and Computer Vision libraries.</description>
    </item>
    
    <item>
      <title>Skid Steering</title>
      <link>http://www.rustyeddy.com/notes/skid-steering/</link>
      <pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/skid-steering/</guid>
      <description>Skid steering basics
Based on fixed direction wheels[1] or tracks There are two groups or sides of wheels: left and right All wheels in a group MUST always point in the same direction All wheels in a group MUST always rotate at the same rate Direction is determined by the speed of the two wheel groups To move straight all motors rotate at the same rate Forward and Reverse are determined by positive and negative values Turning is achieved by varying the throttle on the right and left Example The Skidder class has the following API, as you can see all of the movements we desire can be accomplished with a single API call skidder.</description>
    </item>
    
    <item>
      <title>Raspberry Pi Motor Control Software</title>
      <link>http://www.rustyeddy.com/notes/rpi-motor-control-service/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/rpi-motor-control-service/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TODO ~ replace image with one of the Raspberry Pi Controller&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This software adds a Skid Steer motor control software to the
&lt;a href=&#34;http://github.com/mobilerobot-io/rpid&#34;&gt;Raspberry Pi Device Server&lt;/a&gt;
device server.  RPID adds motor controls accessible via both MQTT and
REST APIs, as well as directly with the Skidder python library.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MQTT For Controllor Communication</title>
      <link>http://www.rustyeddy.com/notes/mqtt-comm/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/mqtt-comm/</guid>
      <description>&lt;p&gt;The MQTT message bus is a simple but critical element of our MBR
software design.  MQTT provides what is known as a &lt;em&gt;publish/suscribe&lt;/em&gt;
or &lt;em&gt;pubsub&lt;/em&gt; communications model.  This model of machine to machine
communication has some attractive benefits for realtime driving
algorithms that we will discuss in this post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Streaming Video is Complicated</title>
      <link>http://www.rustyeddy.com/notes/streaming-video/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/streaming-video/</guid>
      <description>I need to stream live video from a moving vehical with a connected camera and a possibly connected wifi.
Live High Resolution Video Video will stream from the vehicle to be picked up by video consumers and processed as required. Examples of consumers are Live Video Display on our (Webapp), OpenCV for vision algoritms.
High Demand For Low Resolution It turns out that computer vision alogrithms typically run quite a bit faster on lower resolution images, the additional information from these hi-res images can slow down the type of algorithms we are interested in by many factors.</description>
    </item>
    
    <item>
      <title>The ESP32</title>
      <link>http://www.rustyeddy.com/notes/esp32/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/esp32/</guid>
      <description>You need to push the RESET button to get them to write flash.
A power packed chip that I have just started playing with. Give some quick specs here: and compare with other well known options (arduino&amp;rsquo;s, stm32 or Raspberry Pi.
Standout Features Builtin Wifi &amp;amp; BT and others Dual Core Powerful esp-idf FreeRTOS (Arduino optional) Great Feature Set! Usage Interactive Console over UART This demonstrates using the serial port for an interactive console while ESP is running other things.</description>
    </item>
    
    <item>
      <title>Streaming Video Tools</title>
      <link>http://www.rustyeddy.com/notes/streaming-video-tools/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/streaming-video-tools/</guid>
      <description>The grandparents of streaming video, and snapshots, read, writing and transcoding video and single frame images are ffmpeg, vlc and gstreamer.
Other platforms, such as the wildly cool and inexpensive Raspberry Pi and attached CSI Camera (Raspberry Pi Camera) have thier own set of utilities: like raspivid. Or the NVidia Nano with it&amp;rsquo;s gst-streamer plugins and nvgst-capture/nvgst-playback utilies.
This writting is as of March 2019
GStreamer Complex, Flexible, Future Proof GStreamer really complex pipelines but insanely flexible.</description>
    </item>
    
    <item>
      <title>Control Station Display</title>
      <link>http://www.rustyeddy.com/notes/touch-screen-display/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/touch-screen-display/</guid>
      <description>&lt;p&gt;We are going to build a simple control station that begins with a
Raspberry Pi and connected &lt;em&gt;7 inch touchscreen tablet&lt;/em&gt;.  I have it
setup in &amp;ldquo;kiosk mode&amp;rdquo;, which is basically full page chrome without the
tabs and tool bars etc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TLV the Type Length Vector Protocol</title>
      <link>http://www.rustyeddy.com/notes/tlv-and-realitime-communication/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/tlv-and-realitime-communication/</guid>
      <description>&lt;p&gt;TLV is a very simple communication protocol that can be used to send
messages around a complex, distributed system.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sync vs. Async, Blocking vs. Non-blocking</title>
      <link>http://www.rustyeddy.com/notes/sync-async/</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/sync-async/</guid>
      <description>Synchronous vs. Asynchronous Blocking and Non-Blocking A pratical example of asynchronous is a &amp;ldquo;blocking&amp;rdquo; call vs. non-blocking call. For example you are going to call a web service to gather a lot of data, it will take a long time. You can:
Make a blocking call (synchronous) that pauses (blocks) the program from doing anything else until you receive a reply (or error).
Make a non-blocking (asynchronous) call that requests the data from the remote server, after sending the request the program continues to run even though the response from the server has not yet been returned.</description>
    </item>
    
    <item>
      <title>Streaming Live Video on a Local Lan Vs. Internet</title>
      <link>http://www.rustyeddy.com/notes/streaming-video-local-network/</link>
      <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/streaming-video-local-network/</guid>
      <description>differences in local vs. internet and streaming video
live stream vs. video on demand
what does real time mean?
what to do with late packets?
UDP vs. TCP in the local network
RTP and UDP
RTP and RTCP
RTP and RTSP
RTP and Multicast
Tools used
TODO: workflowy outline
RTSP is a good option for streaming video in a local setup up, where minimal delay is the highest priority. However, RTSP does not typically do very well over the Internet due to the nature of RTP/UDP.</description>
    </item>
    
    <item>
      <title>Software Development Guide</title>
      <link>http://www.rustyeddy.com/software/software-dev-guide/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/software/software-dev-guide/</guid>
      <description>&lt;p&gt;[TODO Move this stuff to /software]&lt;/p&gt;
&lt;p&gt;This guide is best suited for small to mid sized development projects,
a good example are micro-services or embedded development for small
manufactures, makers and IoT companies.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Publications</title>
      <link>http://www.rustyeddy.com/resume/pubs/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/resume/pubs/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ramesh Govindan, et el.&lt;/strong&gt; &lt;em&gt;&amp;ldquo;An Architecture for Stable, Analyzable
Internet Routing&amp;rdquo;&lt;/em&gt;, IEEE Network Magazine, Jan-Feb 1999.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rusty Eddy, Ramesh Govindan,&lt;/strong&gt; &lt;em&gt;&amp;ldquo;Testing Protocol Implementations
with pkt&amp;rdquo;&lt;/em&gt;, Networld+Interop 99 Engineers Conference Proceedings, June
1999&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rusty Eddy&lt;/strong&gt;, &lt;em&gt;&amp;ldquo;Emulating Multicast Routing Protocols in a Software
Defined Networking (SDN) Controller&amp;rdquo;&lt;/em&gt;, AT&amp;amp;T 2016 Software Symposium&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rusty Eddy&lt;/strong&gt;, &lt;em&gt;&amp;ldquo;Testing Multicast SDN Networks in a Container&amp;rdquo;&lt;/em&gt;,
AT&amp;amp;T 2016 Software Symposium&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Inexpensive Motor Controllers for Arduino and Raspberry Pi</title>
      <link>http://www.rustyeddy.com/notes/motor-controlor-notes/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/motor-controlor-notes/</guid>
      <description>&lt;p&gt;I prefer to use an Arduino with a Motor Controller over say a
Raspberry Pi with a motor-controller.  I believe the Arudino has
better support for dedicated Real-time software vs. the Raspberry Pi
and as a superior platform for general computing including running
Control Software.  This is how we do it on the West side &amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Control System Design</title>
      <link>http://www.rustyeddy.com/notes/control-design/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/control-design/</guid>
      <description>Early in the process of building the first set of mobile robots I discovered that I was not going to settle on a single micro controller.
The first two obvious choices being the Arduino or Raspberry Pi, for which I tried both with a modest level of success. I quickly realized that I would not be providing my sole focus on either platform, neither was sufficient for my grand plans for a number of reasons.</description>
    </item>
    
    <item>
      <title>Golang timers to remove stale sensor stations</title>
      <link>http://www.rustyeddy.com/notes/go-timers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/go-timers/</guid>
      <description>This articles introduces Go (Golang) Timers as the mechanism the the IoTa gateway uses to identify stale IoT stations. Modifying the Station with with a new Go timestamp field will allow IoTe to determine how long it has been since the last time it has heard from a given Station.
If the last refresh time for a particular station has been longer than the timeout period the Station will be marked as stale.</description>
    </item>
    
    <item>
      <title>website</title>
      <link>http://www.rustyeddy.com/notes/website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/website/</guid>
      <description>Websites According to the W3.org (official web people), modern websites may consist of, i.e. modern browsers must support 3 things:
HTML for basic website structure and other things CSS for style JavaScript for all things dynamic. The most basic of all websites is a single text file containing some content wrapped in some HTML markup. For example here is a working, but incomplete example of HTML snippet attempting to display a level 1 header with the words Hello, world!</description>
    </item>
    
    <item>
      <title>Why Choose the Go programming Language for your Project?</title>
      <link>http://www.rustyeddy.com/notes/why-choose-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.rustyeddy.com/notes/why-choose-go/</guid>
      <description>Go is simple Go is easy to learn to program with and it is free! Go is much easier to maintain and deploy than Java.
Go does not have weird virtual environments of Python or npm, gulp, grunt, yarn, webpack (what&amp;rsquo;s next?) convuluted and complex build environments.
Go is Fast It smokes most other languages, except the grand mother of Unix programming C. The Go programming language is almost as fast (performant geeky folks like to say) as C.</description>
    </item>
    
  </channel>
</rss>
